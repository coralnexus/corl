en:
  corl:
    errors:
      batch_error: |-
        An issue was encountered during batch processing
    core:
      action:
        options:
          parallel: |-
            Enable parallelism of node action execution (default %{default_value})
          net_remote: |-
            Optional network project remote name to use in updating and storing changes remotely (default %{default_value})
          net_provider: |-
            CORL network provider to use for managing cloud nodes (default %{default_value})
          node_provider: |-
            Default to using a specific node provider but individual node references can override (default %{default_value})
          nodes: |-
            Optional nodes on which to execute this action
        errors:
          network_provider: |-
            Network plugin provider %{value} is not loaded >> Pick from the following: %{choices}
          node_provider: |-
            Node plugin provider %{value} is not loaded >> Pick from the following: %{choices}
          nodes: |-
            Node reference %{value} failed to parse or provider %{provider} isn't loaded (%{name})
      node:
        bootstrap:
          status: |-
            Bootstrap script %{script} failed with status %{status}
      mixin:
        action:
          keypair:
            options:
              private_key: |-
                Optional existing private SSH key to use for SSH communication (new keys are generated by default)
              require_password: |-
                Require and prompt for a password for generated keys (default %{default_value})
              key_type: |-
                Type of SSH key to generate (default %{default_value})
              key_bits: |-
                Strength of generated key encryption in bits (default %{default_value})
              key_comment: |-
                Optional key comment (attached at the end of the public key)
            errors:
              private_key_not_found: |-
                Private key %{value} not found
              private_key_parse_error: |-
                Private key %{value} failed to parse and can not be accepted as a valid private SSH key
              key_type: |-
                SSH key type %{value} not supported >> Pick from the following: %{choices}
              key_bits: |-
                Encryption strength must be greater than %{required} bits (%{value} specified)
              no_password: |-
                Password verification of private key was terminated (verification required to use encrypted SSH keys)             
    action:
      unknown: 
        description: |-
          This CORL action has no description available
        help: |-
          There is no extended help information available for this CORL action.
      plugin:
        list:
          description: |-
            List all of the currently loaded plugins and providers
          help: |-
            List all of the currently loaded plugins and providers.
          
            Nucleon plugin providers are defined via a path search from specified base directories of the format below:
          
            >> {base_dir}/lib/{namespace}/{plugin_type}/{provider}.rb
          
            By default, base paths are searched from:
              
              * Ruby Gems on the system
              * Managed projects (including networks and packages)
              * Component projects (such as Puppet modules)
              * Current directory and parents
            
            More base paths from across the system can be added by implementing the "register_plugins" hook within an 
            extension plugin provider in your project.
          info:
            namespace: |-
              Namespace: %{namespace}
            plugin_type: |-
              Plugin type: %{type}
            providers: |-
              Providers:
        create:
          description: |-
            Create a new plugin within the current project
          help: |-
            Create a new plugin provider of a specified type.
            
            So far the only type with an implemented template is the Action plugin type.  
            More coming soon.
            
            If you want to save an interpolated template to a project provider, use the --save option.
          options:
            type: |-
              Type of plugin to create
            name: |-
              Name of the plugin provider to create
            save: |-
              Save the interpolated and rendered plugin provider to the current project (default %{default_value})
            interpolate: |-
              Interpolate all properties from given arguments before rendering (default %{default_value})
            template_path: |-
              Path on the system to search for plugin provider templates of the format {namespace}.{plugin_type}.erb (default %{default_value})
          error:
            parse_failed: |-
              Template file %{file} for %{plugin_namespace}.%{plugin_type} could not be parsed
            no_template: |-
              No template file exists for %{file}
            provider_exists: |-
              Plugin already exists at %{file}
            save_failed: |-
              Plugin can not be saved to %{file}
          info:
            plugin_file: |-
              Plugin: %{file}
          success:
            saved: |-
              Plugin successfully saved to %{file}
      cloud:
        create:
          description: |-
            Create a new network project
          help: |-
            Create a new network project with an optional existing project reference.
            
            Network projects are started from template projects that contain default nodes, configurations, etc...
            
            Project references take the form:
              
              {project provider}:::{provider id}[{project revision}]
              
              github:::coralnexus/network-template[master]  (the default network template)
              
            If the --path option is not specified the create action attempts to create the project in the current
            directory.  If files or directories exist, the project creation will fail.
          info:
            start: |-
              Creating network from %{project_reference} at %{path}
        inspect:
          description: |-
            Inspect the network configuration
          help: |-
            Inspect any defined network configuration.  It is not intended to access or
            set the node configurations defined in the config directory, which you can use the `node lookup` and 
            `cloud config` actions.
            
            Nested configurations can be accessed by specifying the nested keys in sequence in the arguments.
            
            corl inspect                           # Returns all loaded configurations for network
            corl inspect nodes                     # Returns all node definitions 
            corl inspect nodes rackspace           # Returns all Rackspace node definitions
            corl inspect settings web_server facts # Returns all facts defined for settings group `web_server`
            corl inspect provisioners              # Returns all provisioner settings defined for network
            
            The configurations include:
              
              * General network settings
              * Node definitions
              * Provisioner settings
              * Configurations of the above types loaded from included packages
              
            The results can be viewed in multiple formats dependending on the Nucleon translator plugins currently
            loaded into the project.  To see which ones are loaded, run:  `corl plugins`
          options:
            format: |-
              Translator provider to use to render configuration output (default %{default_value})                
        machines:
          description: |-
            Return a list of machine types supported by a provider
        regions:
          description: |-
            Retrieve known regions for a specified provider
        images:
          description: |-
            Search the available images at a specified provider
        vagrantfile: 
          description: |-
            Generate a scaffolding Vagrantfile
      node:
        spawn:
          description: |-
            Spawn new nodes in the network
        bootstrap:
          description: |-
            Bootstrap existing nodes
        seed:
          description: |-
            Seed nodes with a specified network project
        build:
          description: |-
            Build packages on nodes
        provision:
          description: |-
            Provision nodes
        image:
          description: |-
            Create images of existing nodes
        exec:
          description: |-
            Execute CLI commands across nodes
        reboot:
          description: |-
            Reboot nodes
        stop:
          description: |-
            Stop and save currently running nodes
        start:
          description: |-
            Start an existing saved node
        destroy:
          description: |-
            Destroy network nodes
        ip:
          description: |-
            Return the public IP address for nodes
        facts:
          description: |-
            Retrieve node facts
        lookup:
          description: |-
            Lookup node configurations 
        ssh:
          description: |-
            SSH into a node       
        authorize: 
          description: |-
            Authorize a public key for node access
        revoke:
          description: |-
            Revoke a public keys access to nodes
        keypair:
          description: |-
            Generate a new SSH keypair           
    actions:
      images:
        options:
          match_case: |-
            Match case on any search terms given when searching for images (default %{default_value})
          require_all: |-
            Require all search terms to be present in image descriptions to be included (default %{default_value})
          provider: |-
            Node provider to retrieve images for
          search: |-
            Optional array of search terms to filter image results
        start: |-
          Retrieving a list of defined images from %{node_provider}
        results: |-
          Total of %{images} images found
      machines:
        options:
          node_provider: |-
            Node provider to retrieve machine types
        start: |-
          Retrieving a list of available machines from %{node_provider}
        results: |-
          Total of %{machines} machine types found
      spawn:
        options:
          parallel: |-
            Enable or disable parallelism of node creation (default %{default_value})
          seed: |-
            CORL project reference with cloud project to seed new machines with (default %{default_value})
          region: |-
            Machine provider region in which to create the machines (defaults to first defined in provider)
          machine_type: |-
            Provider ID of machine type to create (defaults to first defined in provider - usually smallest)
          provider: |-
            Create machines with this node provider
          image: |-
            Provider ID of operating system image on which to initialize the new machines           
          hostnames: |-
            Hostnames of machines to create on provider infrastructure
        start: |-
          Spawning new machines on %{node_provider}
      identity:
        start: |-
          Setting identity on %{provider} machine %{name}
      ssh:
        options:
        errors:
          ssh_nodes_empty: |-
            Nodes must be specified in order to launch a SSH terminal
          ssh_nodes: |-
            Provider %{node_provider} node %{name} is not a valid node to launch terminal (%{value} given)
        start: |-
          Launching terminal for machine %{hostname} (%{id})
        success: |-
          Machine %{hostname} (%{id}) successfully ended terminal session
        failure: |-
          Machine %{hostname} (%{id}) terminal session failed with status %{status}
      bootstrap:
        options:
          bootstrap_path: |-
            Bootstrap script top level local directory (default %{default_value})
          bootstrap_init: |-
            Gateway bootstrap script within the bootstrap project directory (default %{default_value})
          bootstrap_glob: |-
            Path glob to use in searching bootstrap scripts for remote execution (default %{default_value})
          auth_files: |-
            Any additional authorization or state files to pass to the node during bootstrap (relative to local home)
          home_env_var: |-
            Home directory environment variable on remote server (default %{default_value})
          home: |-
            Specified home directory on remote server (default %{default_value})
          bootstrap_nodes: |-
            Node references to bootstrap
        errors:
          bootstrap_path: |-
            Bootstrap path must be an existing directory
          auth_files: |-
            Authorization file %{value} does not exist on the local system
          bootstrap_nodes_empty: |-
            Nodes must be specified in order to run the bootstrap action
          bootstrap_nodes: |-
            Provider %{node_provider} node %{name} is not a valid node to bootstrap (%{value} given)
        start: |-
          Starting bootstrap of machine %{hostname} (%{id})
        success: |-
          Machine %{hostname} (%{id}) successfully bootstrapped
        failure: |-
          Machine %{hostname} (%{id}) bootstrap failed with status %{status}
      exec:
        options:
          command: |-
            Command line executable and arguments to execute on machine
      lookup:
        options:
          context: |-
            Lookup evaluation context; priority, array, hash (default %{default_value})
        errors:
          context: |-
            Lookup evaluation context %{value} is not valid >> Possible contexts: %{choices}
      seed:
        options:
          project_branch: |-
            Project branch to seed project (default %{default_value})
          project_reference: |-
            Reference to seed project (default %{default_value})
        errors:
          project_reference: |-
            Project reference %{value} failed to parse or provider %{provider} isn't loaded >> Possible providers: %{choices}
        start: |-
          Now seeding CORL node
      image:
        start: |-
          Starting image of %{provider} machine %{name} 
      start:
        start: |-
          Starting %{provider} machine %{name} 
      stop:
        start: |-
          Stopping %{provider} machine %{name}
      reboot:
        start: |-
          Rebooting %{provider} machine %{name}
      destroy:
        start: |-
          Destroying %{provider} machine %{name}        
      build:
        start: |-
          Building provisioner project
      provision:
        options:
          dry_run: |-
            Whether or not to build the provisioner catalog without configuring the system (default %{default_value})
        start: |-
          Starting provision run
    vagrant:
      actions:
        init_keys:
          start: |-
            Initializing CORL development keys...
        link_network:
          start: |-
            Linking CORL network to standard directory...
        delete_cache:
          start: |-
            Clearing CORL cache for this machine...
            